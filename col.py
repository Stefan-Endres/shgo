from numpy import *
N = 17
bounds = [[0.0, 4.0]] + list(zip([-4.0] * (N - 1),
                                 [4.0] * (N - 1)))

global_optimum = [[0.651906, 1.30194, 0.099242, -0.883791,
                   -0.8796, 0.204651, -3.28414, 0.851188,
                   -3.46245, 2.53245, -0.895246, 1.40992,
                   -3.07367, 1.96257, -2.97872, -0.807849,
                   -1.68978]]
fglob = 11.7464


def fun(x):
    d = asarray([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [1.27, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [1.69, 1.43, 0, 0, 0, 0, 0, 0, 0, 0],
                 [2.04, 2.35, 2.43, 0, 0, 0, 0, 0, 0, 0],
                 [3.09, 3.18, 3.26, 2.85, 0, 0, 0, 0, 0, 0],
                 [3.20, 3.22, 3.27, 2.88, 1.55, 0, 0, 0, 0, 0],
                 [2.86, 2.56, 2.58, 2.59, 3.12, 3.06, 0, 0, 0, 0],
                 [3.17, 3.18, 3.18, 3.12, 1.31, 1.64, 3.00, 0, 0, 0],
                 [3.21, 3.18, 3.18, 3.17, 1.70, 1.36, 2.95, 1.32, 0, 0],
                 [2.38, 2.31, 2.42, 1.94, 2.85, 2.81, 2.56, 2.91, 2.97,
                  0.]])

    xi = atleast_2d(asarray([0.0, x[0]] + list(x[1::2])))
    xj = repeat(xi, size(xi, 1), axis=0)
    xi = xi.T

    yi = atleast_2d(asarray([0.0, 0.0] + list(x[2::2])))
    yj = repeat(yi, size(yi, 1), axis=0)
    yi = yi.T

    inner = (sqrt(((xi - xj) ** 2 + (yi - yj) ** 2)) - d) ** 2
    inner = tril(inner, -1)
    return sum(sum(inner, axis=1))


print(fun([3, ] * 17))

options = {'disp': True}
# shgo(fun, bounds, options=options)
